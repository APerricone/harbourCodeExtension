
{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Harbour",

	"patterns": [{
			"include": "#directives"
		},
		{
			"include": "#c_code"
		},
		{
			"include": "#function-declaration"
		},
		{
			"include": "#class-declaration"
		},
		{
			"include": "#method-declaration"
		},
		{
			"include": "#variable-declaration"
		},
		{
			"include": "#commands-all"
		},
		{
			"include": "#inline-staments"
		}
	],
	"repository": {
		"inline-staments": {
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#codeblock"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#array"
				},
				{
					"include": "#method-call"
				},
				{
					"match": "(?i)([a-z_]\\w*)(?=\\s*\\(\\s*\\)\\s*:\\s*new\\s*\\()",
					"captures": {
						"1": {
							"name": "support.class.harbour"
						}
					}
				},
				{
					"include": "#builtin-class-call"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#function-call"
				},
				{
					"include": "#round-braces"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#macro-var"
				},
				{
					"include": "#macro-exp"
				},
				{
					"include": "#identifiers"
				},
				{
					"include": "#numbers"
				}
			]
		},
		"function-staments": {
			"patterns": [{
					"include": "#variable-declaration"
				},
				{
					"include": "#commands-all"
				},
				{
					"include": "#inline-staments"
				}
			]
		},
		"numbers": {
			"patterns": [{
					"match": "\\b[0-9]+(\\.[0-9]+)?\\b",
					"name": "constant.numeric.harbour"
				},
				{
					"match": "(?i)\\b0x[0-9a-f]+\\b",
					"name": "constant.numeric.exadecimal.harbour"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.harbour",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.harbour"
						}
					}
				},
				{
					"name": "comment.line.double-slash.harbour",
					"match": "(^[ \\t]+)?((//).*)",
					"captures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.harbour"
						},
						"2": {
							"name": "comment.line.double-slash.harbour"
						},
						"3": {
							"name": "punctuation.definition.comment.harbour"
						}
					}
				},
				{
					"name": "comment.line.double-ampersand.harbour",
					"match": "(^[ \\t]+)?((&&).*)",
					"captures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.harbour"
						},
						"2": {
							"name": "comment.line.double-ampersand.harbour"
						},
						"3": {
							"name": "punctuation.definition.comment.harbour"
						}
					}
				},
				{
					"name": "comment.line.note.harbour",
					"match": "(^[ \\t]*)(((?i:NOTE)).*)",
					"captures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.harbour"
						},
						"2": {
							"name": "comment.line.note.harbour"
						},
						"3": {
							"name": "punctuation.definition.comment.harbour"
						}
					}
				},
				{
					"name": "comment.line.asterisk.harbour",
					"match": "(^[ \\t]*)((\\*).*)",
					"captures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.harbour"
						},
						"2": {
							"name": "comment.line.asterisk.harbour"
						},
						"3": {
							"name": "punctuation.definition.comment.harbour"
						}
					}
				},
				{
					"match": "\\*/.*(\\r|\\n)",
					"name": "invalid.illegal.stray-comment-end.harbour"
				}
			]
		},
		"continue-expression": {
			"patterns": [{
				"begin": "(;)\\s*(?=(?:\\/\\/.*|&&.*|(?:\\/\\*.*\\*\\/)+)?(?m:$))",
				"beginCaptures": {
					"1": {
						"name": "constant.character.escape.line-continuation.harbour"
					}
				},
				"end": "^",
				"patterns": [{
					"include": "#comments"
				}]
			}]
		},
		"punctuation-comma": {
			"patterns": [{
				"name": "punctuation.separator.comma.harbour",
				"match": ","
			}]
		},
		"parameter-comma": {
			"patterns": [{
				"name": "punctuation.separator.parameters.harbour",
				"match": ","
			}]
		},
		"function-parameters": {
			"name": "meta.parameters.harbour",
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.begin.harbour"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.harbour"
				}
			},
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"name": "variable.parameter.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)\\b"
				},
				{
					"include": "#parameter-comma"
				}
			]
		},
		"function-header": {
			"patterns": [{
					"name": "meta.definition.function.harbour entity.name.function.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)"
				},
				{
					"include": "#function-parameters"
				}
			]
		},
		"function-declaration": {
			"patterns": [{
				"name": "meta.function.harbour",
				"begin": "(?i)^\\s*(stat(?:i(?:c)?)?\\s+)?(proc(?:e(?:d(?:u(?:re?)?)?)?)?|func(?:t(?:i(?:on?)?)?)?)\\b",
				"beginCaptures": {
					"1": {
						"name": "keyword.modifier.harbour"
					},
					"2": {
						"name": "keyword.type.function.harbour"
					}
				},
				"end": "(?m:$)",
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"include": "#function-header"
					}
				]
			}]
		},
		"variable-name": {
			"patterns": [
				{
					"name": "variable.other.readwrite.harbour",
					"match": "(?i)\\b([a-z_]\\w*)\\b"
				}
			]
		},
		"variable-initializer": {
			"begin": ":=",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.assignment.harbour"
				}
			},
			"end": "(?=(?m:$)|,)",
			"patterns": [{
					"begin": "(?i)([a-z_]\\w*)\\s*(:=)",
					"beginCaptures": {
						"1": {
							"name": "variable.other.readwrite.harbour"
						},
						"2": {
							"name": "keyword.operator.assignment.harbour"
						}
					},
					"end": "(?=(?m:$)|,)",
					"patterns": [{
							"include": "#variable-initializer"
						},
						{
							"include": "#inline-staments"
						}
					]
				},
				{
					"include": "#inline-staments"
				}
			]
		},
		"variable-type-definition": {
			"patterns": [
				{
					"name": "keyword.type.harbour",
					"match": "\\b(?i:as\\s+(?:character|numeric|date|logical|codeblock|array|nil))\\b"
				}
			]
		},
		"variable-parameters-declaration": {
			"name": "meta.parameters.harbour",
			"begin": "(?i)^\\s*para(?:m(?:e(?:t(?:e(?:r(?:s)?)?)?)?)?)?\\b",
			"beginCaptures": {
				"0": {
					"name": "storage.type.parameters.harbour"
				}
			},
			"end": "(?m:$)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.harbour"
				}
			},
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"name": "variable.parameter.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)\\b"
				},
				{
					"include": "#parameter-comma"
				}
			]
		},
		"variable-memvar-declaration": {
			"name": "meta.definition.variable.memvar.harbour",
			"begin": "(?i)^\\s*memv(?:a(?:r)?)?\\b",
			"beginCaptures": {
				"0": {
					"name": "storage.type.memvar.harbour"
				}
			},
			"end": "(?m:$)",
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"name": "variable.other.readwrite.memvar.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)\\b"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"variable-field-declaration": {
			"name": "meta.definition.variable.field.harbour",
			"begin": "(?i)^\\s*(fiel(?:d)?)\\b",
			"beginCaptures": {
				"0": {
					"name": "storage.type.field.harbour"
				}
			},
			"end": "(?m:$)",
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"begin": "(?i)\\bin\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.in.harbour"
						}
					},
					"end": "(?i)\\b([A-Z_]\\w*)\\b",
					"endCaptures": {
						"0": {
							"name": "variable.other.readwrite.field.harbour"
						}
					},
					"patterns": [{
							"include": "#continue-expression"
						},
						{
							"include": "#comments"
						}
					]
				},
				{
					"name": "variable.other.readwrite.field.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)\\b"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"variable-local-declaration": {
			"name": "meta.definition.variable.local.harbour",
			"begin": "(?i)^\\s*(loca(?:l)?)\\b",
			"beginCaptures": {
				"0": {
					"name": "storage.type.local.harbour"
				}
			},
			"end": "(?m:$)",
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#variable-type-definition"
				},
				{
					"name": "variable.other.readwrite.local.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)\\b"
				}
			]
		},
		"variable-static-declaration": {
			"name": "meta.definition.variable.static.harbour",
			"begin": "(?i)^\\s*(stat(?:i(?:c)?)?)\\b",
			"beginCaptures": {
				"0": {
					"name": "storage.type.static.harbour"
				}
			},
			"end": "(?m:$)",
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#variable-type-definition"
				},
				{
					"name": "variable.other.readwrite.static.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)\\b"
				}
			]
		},
		"variable-private-declaration": {
			"name": "meta.definition.variable.private.harbour",
			"begin": "(?i)^\\s*(priv(?:a(?:t(?:e)?)?)?)\\b",
			"beginCaptures": {
				"0": {
					"name": "storage.type.private.harbour"
				}
			},
			"end": "(?m:$)",
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#variable-type-definition"
				},
				{
					"name": "variable.other.readwrite.private.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)\\b"
				}
			]
		},
		"variable-public-declaration": {
			"name": "meta.definition.variable.public.harbour",
			"begin": "(?i)^\\s*(publ(?:i(?:c)?)?)\\b",
			"beginCaptures": {
				"0": {
					"name": "storage.type.public.harbour"
				}
			},
			"end": "(?m:$)",
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#variable-type-definition"
				},
				{
					"name": "variable.other.readwrite.public.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)\\b"
				}
			]
		},
		"variable-declaration": {
			"patterns": [{
					"include": "#variable-parameters-declaration"
				},
				{
					"include": "#variable-memvar-declaration"
				},
				{
					"include": "#variable-field-declaration"
				},
				{
					"include": "#variable-local-declaration"
				},
				{
					"include": "#variable-static-declaration"
				},
				{
					"include": "#variable-private-declaration"
				},
				{
					"include": "#variable-public-declaration"
				}
			]
		},
		"class-declaration": {
			"patterns": [{
				"name": "meta.class.harbour",
				"begin": "(?i)(?=^\\s*(?:CREATE\\s*)?CLASS\\b)",
				"end": "(?i)END[\\t ]*CLASS",
				"endCaptures": {
					"0": {
						"name": "keyword.end.class.harbour"
					}
				},
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"begin": "(?i)^\\s*((?:create\\s*)?class)\\s*([a-z_]\\w*)\\b",
						"beginCaptures": {
							"1": {
								"name": "keyword.class.class.harbour"
							},
							"2": {
								"name": "entity.name.type.harbour"
							}
						},
						"end": "(?m:$)",
						"patterns": [{
								"include": "#continue-expression"
							},
							{
								"include": "#comments"
							},
							{
								"match": "(?i)(function)\\s+([a-z_]\\w*)",
								"captures": {
									"1": {
										"name": "keyword.control.function.harbour"
									},
									"2": {
										"name": "entity.name.function.harbour"
									}
								}
							},
							{
								"name": "keyword.control.static.harbour",
								"match": "(?i)static"
							},
							{
								"name": "keyword.control.metaclass.harbour",
								"match": "(?i)metaclass"
							},
							{
								"name": "keyword.control.module.harbour",
								"match": "(?i)module\\s+friendly"
							},
							{
								"name": "keyword.inherit.harbour",
								"match": "(?i)from|inherit"
							},
							{
								"include": "#punctuation-comma"
							},
							{
								"name": "support.class.harbour",
								"match": "(?i)[a-z_]\\w*"
							}
						]
					},
					{
						"include": "#method-declaration"
					},
					{
						"match": "^\\s*(export(?:ed)?|visible|hidden|protected):",
						"captures": {
							"1": {
								"name": "storage.modifier.harbour"
							}
						}
					},
					{
						"name": "meta.field.declaration.harbour",
						"begin": "(?i)^\\s*(?:class\\s*)?(data|var)\\b",
						"beginCaptures": {
							"0": {
								"name": "storage.type.field.harbour"
							}
						},
						"end": "(?m:$)",
						"patterns": [{
								"include": "#continue-expression"
							},
							{
								"include": "#comments"
							},
							{
								"name": "storage.modifier.harbour",
								"match": "(?i)\\b(exported|visible|protected|hidden|readonly|ro|persistent|property|sync)\\b"
							},
							{
								"match": "(?i)\\b(type|as)\\s+([a-z_]\\w*)",
								"captures": {
									"1": {
										"name": "keyword.control.${1:/downcase}.harbour"
									},
									"2": {
										"name": "storage.type.${2:/downcase}.harbour"
									}
								}
							},
							{
								"begin": "(?i)(assign|init)\\s+",
								"beginCaptures": {
									"1": {
										"name": "keyword.control.${1:/downcase}.harbour"
									}
								},
								"end": "(?i)(?m:$)|(?=\\b(?:exported|visible|protected|hidden|readonly|ro|persistent|property|sync)\\b)",
								"patterns": [{
									"include": "#inline-staments"
								}]
							},
							{
								"include": "#punctuation-comma"
							},
							{
								"name": "meta.definition.property.harbour variable.object.property.harbour",
								"match": "(?i)\\b[a-z_]\\w*\\b"
							}
						]
					}
				]
			}]
		},
		"method-declaration": {
			"patterns": [{
				"name": "meta.method.declaration.harbour",
				"begin": "(?i)^\\s*(method)\\b",
				"beginCaptures": {
					"1": {
						"name": "keyword.type.method.harbour"
					}
				},
				"end": "(?m:$)",
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"begin": "(?i)\\bclass\\b",
						"beginCaptures": {
							"0": {
								"name": "storage.modifier.class.harbour"
							}
						},
						"end": "(?i)[a-z_]\\w*",
						"endCaptures": {
							"0": {
								"name": "support.class.harbour"
							}
						},
						"patterns": [{
								"include": "#continue-expression"
							},
							{
								"include": "#comments"
							}
						]
					},
					{
						"name": "meta.definition.function.harbour entity.name.function.harbour",
						"match": "(?i)\\b([A-Z_]\\w*)(?=\\s*\\()"
					},
					{
						"begin": "(?i)\\bINLINE\\b",
						"beginCaptures": {
							"0": {
								"name": "constant.language.inline.harbour"
							}
						},
						"end": "(?m:$)",
						"patterns": [{
							"include": "#inline-staments"
						}]
					},
					{
						"begin": "(?i)\\bBLOCK\\b",
						"beginCaptures": {
							"0": {
								"name": "constant.language.block.harbour"
							}
						},
						"end": "(?m:$)",
						"patterns": [{
							"include": "#codeblock"
						}]
					},
					{
						"include": "#function-parameters"
					},
					{
						"name": "constant.language.${1:/downcase}.harbour",
						"match": "(?i)(CONSTRUCTOR|EXTERN|SETGET|VIRTUAL|OPERATOR)"
					}
				]
			}]
		},
		"on-off-macro": {
			"patterns": [{
				"name": "constant.language.logical.harbour",
				"match": "(?i)\\b(ON|OFF)\\b"
			}, {
				"include": "#macro-var"
			}]
		},
		"command-set": {
			"patterns": [{
				"name": "meta.command.set.harbour",
				"begin": "(?i)^\\s*(SET)\\b",
				"beginCaptures": {
					"1": {
						"name": "keyword.operator.set.harbour"
					}
				},
				"end": "(?m:$)",
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"begin": "(?i)\\b(FILECASE|DIRCASE)\\b",
						"beginCaptures": {
							"1": {
								"name": "keyword.operator.${1:/downcase}.harbour"
							}
						},
						"end": "$",
						"patterns": [{
								"include": "#continue-expression"
							},
							{
								"include": "#comments"
							},
							{
								"name": "support.constant.property-value.harbour",
								"match": "(?i)\\b(LOWER|UPPER|MIXED)\\b"
							}
						]
					},
					{
						"begin": "(?i)\\b(autopen|bell|century|confirm|console|cursor|deleted?|escape|exact|exclusive|fixed|hardcommit|intensity|optimize|scoreboard|softseek|strictread|unique|wrap)\\b",
						"beginCaptures": {
							"1": {
								"name": "keyword.operator.${1:/downcase}.harbour"
							}
						},
						"end": "(?m:$)",
						"patterns": [{
								"include": "#continue-expression"
							},
							{
								"include": "#comments"
							},
							{
								"include": "#on-off-macro"
							},
							{
								"include": "#round-braces"
							}
						]
					},
					{
						"begin": "(?i)\\b(ALTERNATE|PRINTER)\\b",
						"beginCaptures": {
							"1": {
								"name": "keyword.operator.${1:/downcase}.harbour"
							}
						},
						"end": "(?m:$)",
						"patterns": [{
								"include": "#continue-expression"
							},
							{
								"include": "#comments"
							},
							{
								"name": "keyword.operator.${1:/downcase}.harbour",
								"match": "(?i)\\b(ADDITIVE|TO)\\b"
							},
							{
								"include": "#on-off-macro"
							},
							{
								"include": "#round-braces"
							}
						]
					},
					{
						"begin": "(?i)\\b(DEVICE)\\b",
						"beginCaptures": {
							"1": {
								"name": "keyword.operator.${1:/downcase}.harbour"
							}
						},
						"end": "(?m:$)",
						"patterns": [{
								"include": "#continue-expression"
							},
							{
								"include": "#comments"
							},
							{
								"name": "support.constant.property-value.harbour",
								"match": "(?i)\\b(SCREEN|PRINT|PRINTER)\\b"
							},
							{
								"name": "keyword.operator.${1:/downcase}.harbour",
								"match": "(?i)\\b(TO)\\b"
							}
						]
					},
					{
						"name": "keyword.operator.${1:/downcase}.harbour",
						"match": "(?i)\\b(TO|DATE|TIME|EPOCH|DECIMALS|DEFAULT|KEY|EOL)\\b"
					},
					{
						"name": "constant.language.logical.harbour",
						"match": "(?i)\\b(ON|OFF)\\b"
					},
					{
						"include": "#inline-staments"
					}
				]
			}]
		},
		"command-display": {
			"patterns": [{
				"name": "meta.command.display.harbour",
				"begin": "^\\s*(@)\\s+",
				"beginCaptures": {
					"1": {
						"name": "punctuation.definition.display.harbour"
					}
				},
				"end": "(?m:$)",
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"name": "keyword.operator.${1:/downcase}.harbour",
						"match": "(?i)\\b(ALIAS|BITMAPS|BMPOFF|BOX|CAPOFF|CAPTION|CHECKBOX|CLEAR|COLOU?R|DOUBLE|FOCUS|GET|GUISEND|LISTBOX|MESSAGE|PICT|PICTURE|PROMPT|PUSHBUTTON|RADIOGROUP|RANGE|SAY|SEND|SIZE|STATE|STYLE|TBROWSE|TO|VALID|WHEN|X|Y)\\b"
					},
					{
						"name": "constant.language.${1:/downcase}.harbour",
						"match": "(?i)\\b(DROPDOWN|SCROLLBAR)\\b"
					},
					{
						"include": "#punctuation-comma"
					},
					{
						"include": "#inline-staments"
					}
				]
			}]
		},
		"command-out": {
			"patterns": [{
				"name": "meta.command.out.harbour",
				"begin": "^\\s*(\\?\\??)",
				"beginCaptures": {
					"1": {
						"name": "punctuation.definition.qout.harbour"
					}
				},
				"end": "(?m:$)",
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"include": "#punctuation-comma"
					},
					{
						"include": "#inline-staments"
					}
				]
			}]
		},
		"command-external": {
			"patterns": [{
				"name": "meta.command.external.harbour",
				"begin": "(?i)^\\s*(EXTERNAL|REQUEST)\\b",
				"beginCaptures": {
					"1": {
						"name": "keyword.operator.external.harbour"
					}
				},
				"end": "(?m:$)",
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"include": "#punctuation-comma"
					},
					{
						"name": "entity.name.function.harbour",
						"match": "(?i)\\b([a-z_][a-z_0-9]+)\\b"
					}
				]
			}]
		},
		"command-clear": {
			"patterns": [{
				"name": "meta.command.clear.harbour",
				"begin": "(?i)^\\s*(CLEAR)\\b",
				"beginCaptures": {
					"1": {
						"name": "keyword.operator.clear.harbour"
					}
				},
				"end": "(?m:$)",
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"name": "support.constant.property-value.harbour",
						"match": "(?i)\\b(ALL|GETS|MEMORY|TYPEAHEAD)\\b"
					}
				]
			}]
		},
		"command-use": {
			"patterns": [{
				"name": "meta.command.use.harbour",
				"begin": "(?i)^\\s*(USE)\\b",
				"beginCaptures": {
					"1": {
						"name": "keyword.operator.use.harbour"
					}
				},
				"end": "(?m:$)",
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"include": "#punctuation-comma"
					},
					{
						"include": "#macro-var"
					},
					{
						"name": "constant.language.${1:/downcase}.harbour",
						"match": "(?i)\\b(EXCLUSIVE|SHARED|NEW|READONLY)\\b"
					},
					{
						"include": "#round-braces"
					},
					{
						"begin": "(?i)\\b(INDEX)\\b",
						"beginCaptures": {
							"1": {
								"name": "keyword.operator.${1:/downcase}.harbour"
							}
						},
						"end": "(?i)(?m:$)|(?=EXCLUSIVE|SHARED|NEW|READONLY|VIA|CODEPAGE|CONNECTION)",
						"patterns": [{
								"include": "#continue-expression"
							},
							{
								"include": "#comments"
							},
							{
								"include": "#punctuation-comma"
							},
							{
								"include": "#macro-var"
							},
							{
								"include": "#round-braces"
							},
							{
								"name": "variable.other.constant.property.harbour",
								"match": "(?i)\\b([a-z_][a-z_0-9]+)\\b"
							}
						]
					},
					{
						"name": "variable.other.constant.property.harbour",
						"match": "(?i)\\b([a-z_][a-z_0-9]+)\\b"
					}
				]
			}]
		},
		"command-read": {
			"patterns": [{
				"name": "meta.command.read.harbour",
				"begin": "(?i)^\\s*(READ)\\b",
				"beginCaptures": {
					"1": {
						"name": "keyword.operator.read.harbour"
					}
				},
				"end": "(?m:$)",
				"patterns": [{
						"include": "#continue-expression"
					},
					{
						"include": "#comments"
					},
					{
						"include": "#punctuation-comma"
					},
					{
						"name": "keyword.operator.${1:/downcase}.harbour",
						"match": "(?i)\\b(MENU|MSG\\s+AT|MSG\\s+COLOR|SAVE)\\b"
					},
					{
						"include": "#inline-staments"
					}
				]
			}]
		},
		"command-foreach": {
			"patterns": [
				{
					"begin": "(?i)^\\s*(for)\\s+(each)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.for.harbour"
						},
						"2": {
							"name": "keyword.control.for.harbour"
						}
					},
					"end": "(?m:$)",
					"patterns": [
						{
							"include": "#continue-expression"
						},
						{
							"include": "#comments"
						},
						{
							"include": "#inline-staments"
						},
						{
							"name": "keyword.control.in.harbour",
							"match": "(?i)\\bin\\b"
						},
						{
							"include": "#variable-name"
						}
					]
				}
			]
		},
		"commands-all": {
			"patterns": [{
					"include": "#command-set"
				},
				{
					"include": "#command-display"
				},
				{
					"include": "#command-out"
				},
				{
					"include": "#command-external"
				},
				{
					"include": "#command-clear"
				},
				{
					"include": "#command-use"
				},
				{
					"include": "#command-read"
				},
				{
					"include": "#command-foreach"
				}
			]
		},
		"codeblock-parameters": {
			"name": "meta.parameters.harbour",
			"begin": "\\|",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.begin.harbour"
				}
			},
			"end": "\\|",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.harbour"
				}
			},
			"patterns": [{
					"include": "#continue-expression"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#parameter-comma"
				},
				{
					"name": "variable.parameter.harbour",
					"match": "(?i)\\b([A-Z_]\\w*)\\b"
				}
			]
		},
		"codeblock": {
			"name": "meta.function.codeblock.harbour",
			"begin": "\\{(?=\\s*\\|)",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.begin.harbour"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.end.harbour"
				}
			},
			"patterns": [{
					"include": "#codeblock-parameters"
				},
				{
					"include": "#inline-staments"
				}
			]
		},
		"array": {
			"name": "meta.array.harbour",
			"begin": "{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.section.array.begin.harbour"
				}
			},
			"end": "}",
			"endCaptures": {
				"0": {
					"name": "punctuation.section.array.end.harbour"
				}
			},
			"patterns": [{
					"match": "=>",
					"name": "keyword.operator.key-value.harbour"
				},
				{
					"match": ",",
					"name": "punctuation.separator.array"
				},
				{
					"include": "#inline-staments"
				}
			]
		},
		"method-call": {
			"name": "meta.method-call.harbour",
			"contentName": "meta.method-call.arguments.harbour",
			"begin": "(?i)(?:(::)|(:))\\s*([a-z_]\\w*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.self.harbour"
				},
				"2": {
					"name": "keyword.operator.class.harbour"
				},
				"3": {
					"name": "entity.name.function.harbour"
				},
				"4": {
					"name": "punctuation.definition.parameters.begin.bracket.round.harbour"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.harbour"
				}
			},
			"patterns": [{
					"include": "#punctuation-comma"
				},
				{
					"include": "#inline-staments"
				}
			]
		},
		"builtin-class-call": {
			"name": "meta.class-call.harbour",
			"contentName": "meta.class-call.arguments.harbour",
			"begin": "(?i)(CheckBox|ErrorNew|GetNew|ListBox|MenuItem|Popup|PushButton|RadioButto|RadioGroup|ScrollBar|TBColumnNew|TBrowseDB|TopBar)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "support.class.builtin.harbour"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.bracket.round.harbour"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.harbour"
				}
			},
			"patterns": [{
					"include": "#punctuation-comma"
				},
				{
					"include": "#inline-staments"
				}
			]
		},
		"function-call": {
			"name": "meta.function-call.harbour",
			"contentName": "meta.function-call.arguments.harbour",
			"begin": "(?i)([a-z_]\\w*)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "entity.name.function.harbour"
				},
				"2": {
					"name": "punctuation.definition.parameters.begin.bracket.round.harbour"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.parameters.end.bracket.round.harbour"
				}
			},
			"patterns": [
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#inline-staments"
				}
			]
		},
		"round-braces": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.begin.bracket.round.harbour"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.end.bracket.round.harbour"
				}
			},
			"patterns": [{
				"include": "#inline-staments"
			}]
		},
		"macro-var": {
			"patterns": [{
				"name": "meta.macro-var.harbour",
				"match": "(?i)(&)([a-zA-Z_][a-zA-Z0-9_]*)(\\.)?",
				"captures": {
					"1": {
						"name": "punctuation.definition.macro.begin.harbour"
					},
					"3": {
						"name": "punctuation.definition.macro.end.harbour"
					}
				}
			}]
		},
		"macro-exp": {
			"patterns": [{
				"name": "punctuation.definition.macro.harbour",
				"match": "(?i)(&)(?=\\()"
			}]
		},
		"keywords": {
			"patterns": [{
					"name": "keyword.control.harbour",
					"match": "\\b(?i:if(?!\\()|ELSEIF|ELSE|end\\s*(?:if|while|case|do|switch|class|sequence|with)?|for|to|step|descend|next|do|while|switch|case|endcase|otherwise|exit|loop|begin\\s+sequence?|recover(?:\\s+using)?|break)\\b"
				},
				{
					"name": "keyword.function.harbour",
					"match": "\\b(?i:static|retu(rn?)?)\\b"
				},
				{
					"name": "variable.language.self.harbour",
					"match": "(?i)\\b(self)\\b"
				},
				{
					"name": "keyword.classes.harbour",
					"match": "\\b(?i:(end)?class(data)?|method|data|message|init|constructor|destructor|hidden:|exported:)\\b"
				},
				{
					"name": "keyword.operator.logical.harbour",
					"match": "(?i)(\\.(and|or|not)\\.)"
				},
				{
					"name": "keyword.getters.harbour",
					"match": "\\b(?i:replace|with)\\b"
				},
				{
					"name": "keyword.accessor.harbour",
					"match": "->"
				},
				{
					"name": "keyword.operator.logical.harbour",
					"match": "!(?!=)"
				},
				{
					"name": "keyword.operator.assignment.harbour",
					"match": ":=|=(?!=)"
				},
				{
					"name": "keyword.operator.assignment.augmented.harbour",
					"match": "[\\+\\-\\*/%^]="
				},
				{
					"name": "keyword.operator.comparison.harbour",
					"match": "[=!<>]=|<>|<|>|\\#|\\$"
				},
				{
					"name": "constant.character.format.placeholder.other.harbour",
					"match": "%s\\b"
				},
				{
					"name": "keyword.operator.arithmetic.harbour",
					"match": "\\-\\-|\\+\\+|/|%|\\*|\\+|\\-"
				},
				{
					"match": ";",
					"name": "punctuation.terminator.statement.harbour"
				}
			]
		},
		"identifiers": {
			"patterns": [{
					"match": "(?<=:)\\s*([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()",
					"captures": {
						"1": {
							"name": "entity.name.function.harbour"
						}
					}
				},
				{
					"match": "(?<=:)\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
					"captures": {
						"1": {
							"name": "variable.other.property.harbour"
						}
					}
				},
				{
					"name": "variable.values.field.harbour",
					"match": "(?<=->)(?i:\\s*[a-z_][a-z0-9_]*)"
				},	
				{
					"match": "(::)\\s*(?=[a-zA-Z_])",
					"captures": {
						"1": {
							"name": "keyword.operator.self.harbour"
						}
					}
				},
				{
					"match": "(?<=\\w)\\s*(:)\\s*(?=[a-zA-Z_])",
					"captures": {
						"1": {
							"name": "keyword.operator.class.harbour"
						}
					}
				},
				{
					"name": "variable.other.object.harbour",
					"match": "\\b([a-zA-Z_][a-zA-Z0-9_]*\\s*)(?=:[^=])"
				},
				{
					"name": "storage.modifier.reference.harbour",
					"match": "(?i)(@)(?=[a-zA-Z_][a-zA-Z0-9_]*)"
				}
			]
		},
		"constants": {
			"patterns": [{
					"name": "constant.language.logical.harbour",
					"match": "(?i)(\\.(t|f|y|n)\\.)"
				},
				{
					"name": "constant.language.nil.harbour",
					"match": "(?i)\\b(nil)\\b"
				},
				{
					"name": "constant.other.date.quoted.harbour",
					"match": "[dD]\"\\d{4}[-/\\.](?:0\\d|1[0-2])[-/\\.](?:[0-2]\\d|3[0-1])\""
				},
				{
					"name": "constant.other.date.numeric.harbour",
					"match": "(?i)\\b0d\\d{8}\\b"
				},
				{
					"name": "constant.other.time.quoted.harbour",
					"match": "[tT]\"\\d{1,4}[-/\\.](0\\d|1[0-2])[-/\\.]([0-2]\\d|3[0-1])(\\s([0-1]?\\d|2[0-3])(:[0-5]?\\d(:[0-5]?\\d(\\.\\d{1,3})?)?)?)?\""
				},
				{
					"name": "constant.other.time.curly.harbour",
					"match": "{\\s*\\^\\s*(\\d+[-/]\\d+[-/]\\d+\\s?)?(\\d+(:\\d+(:\\d+(\\.\\d+)?)?)?)?\\s+}"
				}
			]
		},
		"escapes": {
			"patterns": [{
					"name": "constant.character.escape.harbour",
					"match": "\\\\u\\h{4}|\\\\U\\h{8}"
				},
				{
					"name": "constant.character.escape.harbour",
					"match": "\\\\['\"?\\\\abfnrtv]"
				},
				{
					"name": "constant.character.escape.harbour",
					"match": "\\\\[0-7]{1,3}"
				},
				{
					"name": "constant.character.escape.harbour",
					"match": "\\\\x\\h+"
				}
			]
		},
		"multiline-strings": {
			"patterns": [
				{
					"begin": "(?i)^\\s*((#)\\s*pragma)\\s+(__c?streaminclude)\\b",
					"end": "(?=(?m:$))",
					"contentName": "string.multiline.harbour",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.string.harbour"
						},
						"1": {
							"name": "keyword.control.directive.pragma.harbour"
						},
						"2": {
							"name": "punctuation.definition.directive.harbour"
						},
						"3": {
							"name": "entity.other.attribute-name.pragma.preprocessor.harbour"
						}
					},
					"patterns": [
						{
							"include": "#strings"
						},
						{
							"begin": "\\s*(\\|)",
							"beginCaptures": {
								"1": {
									"name": "keyword.operator.bitwise.harbour"
								}
							},
							"end": "(?=\\||(?m:$))",
							"patterns": [
								{
									"include": "#inline-staments"
								}
							]
						}
					]
				},
				{
					"begin": "(?i)^\\s*((#)\\s*pragma)\\s+(__text|__stream)\\b",
					"end": "(?i)^\\s*(?:((#)\\s*pragma)\\s+(__endtext)|(endtext))",
					"contentName": "string.multiline.harbour",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.string.harbour"
						},
						"1": {
							"name": "keyword.control.directive.pragma.harbour"
						},
						"2": {
							"name": "punctuation.definition.directive.harbour"
						},
						"3": {
							"name": "entity.other.attribute-name.pragma.preprocessor.harbour"
						}
					},
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.string.harbour"
						},
						"1": {
							"name": "keyword.control.directive.pragma.harbour"
						},
						"2": {
							"name": "punctuation.definition.directive.harbour"
						},
						"3": {
							"name": "entity.other.attribute-name.pragma.preprocessor.harbour"
						},
						"4": {
							"name": "keyword.text.harbour"
						}
					},
					"patterns": [
						{
							"begin": "\\s*(\\|)",
							"beginCaptures": {
								"1": {
									"name": "keyword.operator.bitwise.harbour"
								}
							},
							"end": "(?=\\||(?m:$))",
							"patterns": [
								{
									"include": "#inline-staments"
								},
								{
									"include": "#variable-name"
								}
							]
						}
					]
				},
				{
					"begin": "(?i)^\\s*((#)\\s*pragma)\\s+(__cstream)\\b",
					"end": "(?i)^\\s*(?:((#)\\s*pragma)\\s+(__endtext)|(endtext))",
					"contentName": "string.multiline.harbour",
					"beginCaptures": {
						"0": {
							"name": "meta.preprocessor.string.harbour"
						},
						"1": {
							"name": "keyword.control.directive.pragma.harbour"
						},
						"2": {
							"name": "punctuation.definition.directive.harbour"
						},
						"3": {
							"name": "entity.other.attribute-name.pragma.preprocessor.harbour"
						}
					},
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.string.harbour"
						},
						"1": {
							"name": "punctuation.definition.directive.harbour"
						},
						"2": {
							"name": "keyword.control.directive.pragma.harbour"
						},
						"3": {
							"name": "entity.other.attribute-name.pragma.preprocessor.harbour"
						},
						"4": {
							"name": "keyword.text.harbour"
						}
					},
					"patterns": [
						{
							"begin": "\\s*(\\|)",
							"beginCaptures": {
								"1": {
									"name": "keyword.operator.bitwise.harbour"
								}
							},
							"end": "(?=\\||(?m:$))",
							"patterns": [
								{
									"include": "#inline-staments"
								}
							]
						},
						{
							"include": "#escapes"
						}
					]
				},
				{
					"begin": "(?i)^\\s*([cx]?text)(?:\\s+(into|to\\s+var)\\s+([a-z_]\\w*))?\\b",
					"end": "(?i)^\\s*(?:((#)\\s*pragma)\\s+(__endtext)|(endtext))",
					"contentName": "string.multiline.harbour",
					"beginCaptures": {
						"1": {
							"name": "keyword.text.harbour"
						},
						"2": {
							"name": "keyword.operator.into.harbour"
						},
						"3": {
							"name": "variable.other.readwrite.harbour"
						}
					},
					"endCaptures": {
						"0": {
							"name": "meta.preprocessor.string.harbour"
						},
						"1": {
							"name": "keyword.control.directive.pragma.harbour"
						},
						"2": {
							"name": "punctuation.definition.directive.harbour"
						},
						"3": {
							"name": "entity.other.attribute-name.pragma.preprocessor.harbour"
						},
						"4": {
							"name": "keyword.text.harbour"
						}
					},
					"patterns": [
						{
							"include": "#escapes"
						}
					]
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.escaped.harbour",
					"begin": "[eE]\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.harbour"
						}
					},
					"end": "(\")|(\\n|\\r)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.harbour"
						},
						"2": {
							"name": "invalid.illegal.newline.harbour"
						}
					},
					"patterns": [{
							"include": "#escapes"
						},
						{
							"include": "#macro-var"
						}
					]
				},
				{
					"name": "string.quoted.double.harbour",
					"begin": "\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.harbour"
						}
					},
					"end": "(\")|(\\n|\\r)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.harbour"
						},
						"2": {
							"name": "invalid.illegal.newline.harbour"
						}
					},
					"patterns": [{
						"include": "#macro-var"
					}]
				},
				{
					"name": "string.quoted.single.harbour",
					"begin": "('|`)",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.harbour"
						}
					},
					"end": "(')|(\\n|\\r)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.harbour"
						},
						"2": {
							"name": "invalid.illegal.newline.harbour"
						}
					},
					"patterns": [{
						"include": "#macro-var"
					}]
				},
				{
					"name": "string.square.harbour",
					"begin": "(?<![a-zA-Z0-9_\\]\\)])\\s*\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.harbour"
						}
					},
					"end": "(\\])|(\\n|\\r)",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.harbour"
						},
						"2": {
							"name": "invalid.illegal.newline.harbour"
						}
					},
					"patterns": [{
						"include": "#macro-var"
					}]
				}
			]
		},
		"match-markers": {
			"patterns": [{
					"name": "variable.name.match.harbour",
					"match": "(<[\\(\\*!]?)(\\w+)(,\\.\\.\\.)?([!\\*\\)]?>)"
				},
				{
					"name": "meta.command.match.harbour",
					"begin": "(?i)(<)(\\w+)(:)",
					"beginCaptures": {
						"0": { "name": "entity.name.match.harbour" } 
					},
					"end": ">",
					"endCaptures": {
						"0": { "name": "punctuation.definition.tag.end.harbour" }
					},
					"patterns": [{
							"include": "#punctuation-comma"
						},
						{
							"name": "entity.other.attribute-name.harbour",
							"match": "\\w[\\w ]+\\b|&"
						}
					]
				}
			]
		},
		"result-markers": {
			"patterns": [{
				"name": "meta.command.result.harbour",
				"match": "(?i)(#)?(<[\"\\(\\{\\.)]?)(\\w+)([\"\\)\\}\\.)]?>)",
				"captures": {
					"1": {
						"name": "punctuation.definition.tag.harbour"
					},
					"2": {
						"name": "punctuation.definition.tag.begin.harbour"
					},
					"3": {
						"name": "entity.name.tag.harbour"
					},
					"4": {
						"name": "punctuation.definition.tag.end.harbour"
					}
				}
			}]
		},
		"directives": {
			"patterns": [{
					"begin": "(?i)^\\s*((#)\\s*(x?command|x?translate))\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.directive.$3.harbour"
						},
						"2": {
							"name": "punctuation.definition.directive.harbour"
						}
					},
					"end": "(?<!;)\\s*[\\r\\n]{1,2}",
					"name": "meta.preprocessor.command.harbour",
					"patterns": [
						{
							"include": "#match-markers"
						},
						{
							"include": "#comments"
						},
						{
							"include": "#continue-expression"
						},
						{
							"begin": "=>",
							"beginCaptures": {
								"0": {
									"name": "keyword.operator.key.harbour"
								}
							},
							"end": "(?<!;)\\s*(?=[\\r\\n]{1,2})",
							"patterns": [
								{ "include": "source.harbour" }
							]
						}
					]
				},
				{
					"begin": "^\\s*#\\s*stdout\\b",
					"begincaptures": {
						"0": { "name": "keyword.control.directive.stdout.harbour" }
					},
					"end": "(?=//|&&|/\\*)|(?<!;)(?=\\r|\\n)",
					"name": "meta.preprocessor.stdout.harbour",
					"contentName": "string.stdout.harbour"
				},
				{
					"include": "#multiline-strings"
				},
				{
					"begin": "(?i:^\\s*((#)\\s*pragma))",
					"beginCaptures": {
						"1": { "name": "keyword.control.directive.pragma.harbour" },
						"2": { "name": "punctuation.definition.directive.harbour" }
					},
					"end": "(?=(?m:$))",
					"name": "meta.preprocessor.pragma.harbour",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#strings"
						},
						{
							"match": "(?i)\\b(on|off)\\b",
							"name": "constant.other.harbour"
						},
						{
							"match": "(?i)[\\/+-=]",
							"name": "punctuation.definition.pragma.harbour"
						},
						{
							"match": "[a-zA-Z_$][\\w\\-$]*",
							"name": "entity.other.attribute-name.pragma.preprocessor.harbour"
						},
						{
							"include": "#numbers"
						},
						{
							"include": "#continue-expression"
						}
					]
				},
				{
					"name": "meta.preprocessor.include.harbour",
					"begin": "(?i:^\\s*((#)\\s*include)\\s)",
					"end": "(?=//|&&|/\\*)|(?<!;)(?=(?m:$))",
					"beginCaptures": {
						"0": { "name": "meta.preprocessor.harbour" },
						"1": { "name": "keyword.control.directive.conditional.harbour" },
						"2": { "name": "punctuation.definition.directive.harbour" }
					},
					"patterns": [{
							"include": "#strings"
						},
						{
							"name": "string.quoted.angle.harbour",
							"begin": "<",
							"end": "(?:>|(?m:$))"
						}
					]
				},
				{
					"name": "meta.preprocessor.define.harbour",
					"begin": "(?i:^\\s*((#)\\s*define)\\s+([_a-z][_a-z0-9]*))",
					"end": "(?=//|&&|/\\*)|(?<!;)(?=(?m:$))",
					"beginCaptures": {
						"0": { "name": "meta.preprocessor.harbour" },
						"1": { "name": "keyword.control.directive.define.harbour" },
						"2": { "name": "punctuation.definition.directive.harbour" },
						"3": { "name": "entity.name.define.harbour" }
					},
					"patterns": [
						{ "include": "#continue-expression" },
						{ "include": "source.harbour" }
					]
				},{
					"name": "meta.preprocessor.generic.harbour",
					"begin": "(?mi:^\\s*((#)\\s*[_a-z][_a-z0-9]*))",
					"end": "(?=//|&&|/\\*)|(?<!;)(?=(?m:$))",
					"beginCaptures": {
						"0": { "name": "meta.preprocessor.harbour" },
						"1": { "name": "keyword.control.directive.generic.harbour" },
						"2": { "name": "punctuation.definition.directive.harbour" }
					},
					"patterns": [
						{ "include": "#continue-expression" },
						{ "include": "source.harbour" }
					]
				}

			]
		},
		"c_code": {
			"patterns": [{
					"begin": "(?i:^\\s*((#)\\s*pragma)\\s+(BEGINDUMP))",
					"end": "(?i:^\\s*((#)\\s*pragma)\\s+(ENDDUMP))",
					"contentName": "source.c.embedded.harbour",
					"beginCaptures": {
						"0": { "name": "meta.preprocessor.pragma.harbour" },
						"1": { "name": "keyword.control.directive.pragma.harbour" },
						"2": { "name": "punctuation.definition.directive.harbour" },
						"3": { "name": "keyword.dump.harbour" }
					},
					"endCaptures": {
						"0": { "name": "meta.preprocessor.pragma.harbour" },
						"1": { "name": "keyword.control.directive.pragma.harbour" },
						"2": { "name": "punctuation.definition.directive.harbour" },
						"3": { "name": "keyword.dump.harbour" }
					},
					"patterns": [
						{
							"include": "source.c"
						},
						{
							"match": "\\b(HB_FUNC|hb_ret[a-z]+|hb_par[a-z]+)\\s*\\(",
							"name": "keyword.connection.harbour"
						}
					]
				},
				{
					"begin": "(?i:^\\s*((#)\\s*if(?:(?:n)?def)?)\\s+)",
					"end": "(?i:^\\s*((#)\\s*endif))",
					"beginCaptures": {
						"0": { "name": "meta.preprocessor.harbour" },
						"1": { "name": "keyword.control.directive.conditional.harbour" },
						"2": { "name": "punctuation.definition.directive.harbour" }
					},
					"endCaptures": {
						"0": { "name": "meta.preprocessor.harbour" },
						"1": { "name": "keyword.control.directive.conditional.harbour" },
						"2": { "name": "punctuation.definition.directive.harbour" }
					},
					"patterns": [
						{
							"begin": "(?i:^\\s*((#)\\s*elif)\\s+)",
							"end": "(?=(?m:$))",
							"beginCaptures": {
								"0": { "name": "meta.preprocessor.harbour" },
								"1": { "name": "keyword.control.directive.conditional.harbour" },
								"2": { "name": "punctuation.definition.directive.harbour" }
							},
							"patterns": [
								{
									"include": "#inline-staments"
								}
							]
						},
						{
							"begin": "(?i:^\\s*((#)\\s*else)\\s+)",
							"end": "(?=(?m:$))",
							"beginCaptures": {
								"0": { "name": "meta.preprocessor.harbour" },
								"1": { "name": "keyword.control.directive.conditional.harbour" },
								"2": { "name": "punctuation.definition.directive.harbour" }
							}
						},
						{
							"include": "source.harbour"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.harbour"
}
